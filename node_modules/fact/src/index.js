var pairTags = require("./pairTags");

var type     = require("./type");
var isObject = require("./is/object");
var isArray  = require("./is/array");
var isString = require("./is/string");

var macros = {
    if : function(list, data) {
        if (!isArray(list) || list.length < 3) {
            return "";
        }
        var first  = list[0];
        var result = evalList(first, data);
        if (result) {
            return list[1];
        } else {
            return list[2];
        }
    },
    odd: function(list, data) {
        if (evalList(list, data) % 2) {
            return "1";
        } else {
            return "";
        }
    },
    each: function(list, data) {
        if (!isArray(list) || list.length < 2) {
            return "";
        }
        var iter = list[0];
        if (isString(iter)) {
            if (iter[0] == "@") {
                iter = data[iter.substr(1)];
            } else {
                iter = "";
            }
        }
        if (!isArray(iter)) {
            return "";
        }
        var partial = evalTemplate(list[1]);
        var out = "";
        for (var i in iter) {
            out += partial({ key: i, val: iter[i] });
        }
        return out;
    },
    js: function(list, data) {
        if (!isArray(list) || !list.length) {
            return "";
        }
        var first = list[0];
        if (!isString(first)) {
            return "";
        }
        return ["script", {src: first}];
    },
    css: function(list, data) {
        if (!isArray(list) || !list.length) {
            return "";
        }
        var first = list[0];
        if (!isString(first)) {
            return "";
        }
        return ["link", {rel: "stylesheet", href: first}]
    }
};

var evalTemplate = function(list) {
    return function(data) {
        return evalList(list, data);
    }
}

var evalAttributes = function(list, data) {
    var out = "";
    if (!isObject(list)) {
        return out;
    }
    for (var i in list) {
        out += " " + i + "=\"" + list[i] + "\"";
    }
    return out;
}

var evalMacro = function(list, data) {
    var macro = macros[list[0].substr(1)];
    if (macro) {
        return evalList(macro(list.slice(1), data), data);
    } else {
        return "";
    }
}

var evalVariable = function(list, data) {
    var head = list[0];
    var out  = data[head.substr(1)] || head;
    var tail = list.slice(1);
    for (var i in tail) {
        out += evalList(tail[i], data);
    }
    return out;
}

var evalTag = function(list, data) {
    var out = "<" + list[0];
    if (list.length == 1) {
        return out + " />";
    }
    var attributes = evalAttributes(list[1], data);
    var contents   = "";
    if (attributes) {
        out += attributes
        if (list.length > 2) {
            var tail = list.slice(2);
            for (var i in tail) {
                contents = evalList(tail[i], data);
            }
        }
    } else {
        var tail = list.slice(1);
        for (var i in tail) {
            contents += evalList(tail[i], data);
        }
    }
    if (contents) {
        out += ">" + contents + "</" + list[0] + ">";
    } else {
        if (pairTags[list[0]]) {
            out += "></" + list[0] + ">";
        } else {
            out += " />";
        }
    }
    return out;
}

var runMappedEvaluator = function(list, data) {
    var first = list[0];
    switch(type(first)) {
    case "String":
        switch(first[0]) {
        case ":": return evalMacro(list, data);
        case "@": return evalVariable(list, data);
        case "<": return list;
        default:  return evalTag(list, data);
        }
    case "Array":
    default: return evalList(first, data);
    }
}

var evalList = function(list, data) {
    switch(type(list)) {
    case "Array":  return runMappedEvaluator(list, data);
    case "String": return evalVariable([list], data);
    default:       return "";
    }
}

module.exports = evalTemplate